// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: myframe.proto

#ifndef PROTOBUF_myframe_2eproto__INCLUDED
#define PROTOBUF_myframe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace mingz {
namespace frame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_myframe_2eproto();
void protobuf_AssignDesc_myframe_2eproto();
void protobuf_ShutdownFile_myframe_2eproto();

class ObjId;
class PassMsgHead;
class CommonMsgHead;

enum PassMsgCmd {
  ADD_NEW_SOCEKT = 0,
  COMMON_MSG = 1
};
bool PassMsgCmd_IsValid(int value);
const PassMsgCmd PassMsgCmd_MIN = ADD_NEW_SOCEKT;
const PassMsgCmd PassMsgCmd_MAX = COMMON_MSG;
const int PassMsgCmd_ARRAYSIZE = PassMsgCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* PassMsgCmd_descriptor();
inline const ::std::string& PassMsgCmd_Name(PassMsgCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    PassMsgCmd_descriptor(), value);
}
inline bool PassMsgCmd_Parse(
    const ::std::string& name, PassMsgCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PassMsgCmd>(
    PassMsgCmd_descriptor(), name, value);
}
// ===================================================================

class ObjId : public ::google::protobuf::Message {
 public:
  ObjId();
  virtual ~ObjId();

  ObjId(const ObjId& from);

  inline ObjId& operator=(const ObjId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjId& default_instance();

  void Swap(ObjId* other);

  // implements Message ----------------------------------------------

  ObjId* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjId& from);
  void MergeFrom(const ObjId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 obj_id = 1;
  inline bool has_obj_id() const;
  inline void clear_obj_id();
  static const int kObjIdFieldNumber = 1;
  inline ::google::protobuf::uint32 obj_id() const;
  inline void set_obj_id(::google::protobuf::uint32 value);

  // required uint32 thread_index = 2;
  inline bool has_thread_index() const;
  inline void clear_thread_index();
  static const int kThreadIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 thread_index() const;
  inline void set_thread_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.mingz.frame.ObjId)
 private:
  inline void set_has_obj_id();
  inline void clear_has_obj_id();
  inline void set_has_thread_index();
  inline void clear_has_thread_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 obj_id_;
  ::google::protobuf::uint32 thread_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_myframe_2eproto();
  friend void protobuf_AssignDesc_myframe_2eproto();
  friend void protobuf_ShutdownFile_myframe_2eproto();

  void InitAsDefaultInstance();
  static ObjId* default_instance_;
};
// -------------------------------------------------------------------

class PassMsgHead : public ::google::protobuf::Message {
 public:
  PassMsgHead();
  virtual ~PassMsgHead();

  PassMsgHead(const PassMsgHead& from);

  inline PassMsgHead& operator=(const PassMsgHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PassMsgHead& default_instance();

  void Swap(PassMsgHead* other);

  // implements Message ----------------------------------------------

  PassMsgHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PassMsgHead& from);
  void MergeFrom(const PassMsgHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.mingz.frame.ObjId src_id = 1;
  inline bool has_src_id() const;
  inline void clear_src_id();
  static const int kSrcIdFieldNumber = 1;
  inline const ::com::mingz::frame::ObjId& src_id() const;
  inline ::com::mingz::frame::ObjId* mutable_src_id();
  inline ::com::mingz::frame::ObjId* release_src_id();
  inline void set_allocated_src_id(::com::mingz::frame::ObjId* src_id);

  // required .com.mingz.frame.ObjId dst_id = 2;
  inline bool has_dst_id() const;
  inline void clear_dst_id();
  static const int kDstIdFieldNumber = 2;
  inline const ::com::mingz::frame::ObjId& dst_id() const;
  inline ::com::mingz::frame::ObjId* mutable_dst_id();
  inline ::com::mingz::frame::ObjId* release_dst_id();
  inline void set_allocated_dst_id(::com::mingz::frame::ObjId* dst_id);

  // required .com.mingz.frame.PassMsgCmd cmd = 3;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 3;
  inline ::com::mingz::frame::PassMsgCmd cmd() const;
  inline void set_cmd(::com::mingz::frame::PassMsgCmd value);

  // required string str = 4;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 4;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // @@protoc_insertion_point(class_scope:com.mingz.frame.PassMsgHead)
 private:
  inline void set_has_src_id();
  inline void clear_has_src_id();
  inline void set_has_dst_id();
  inline void clear_has_dst_id();
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_str();
  inline void clear_has_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::com::mingz::frame::ObjId* src_id_;
  ::com::mingz::frame::ObjId* dst_id_;
  ::std::string* str_;
  int cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_myframe_2eproto();
  friend void protobuf_AssignDesc_myframe_2eproto();
  friend void protobuf_ShutdownFile_myframe_2eproto();

  void InitAsDefaultInstance();
  static PassMsgHead* default_instance_;
};
// -------------------------------------------------------------------

class CommonMsgHead : public ::google::protobuf::Message {
 public:
  CommonMsgHead();
  virtual ~CommonMsgHead();

  CommonMsgHead(const CommonMsgHead& from);

  inline CommonMsgHead& operator=(const CommonMsgHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonMsgHead& default_instance();

  void Swap(CommonMsgHead* other);

  // implements Message ----------------------------------------------

  CommonMsgHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonMsgHead& from);
  void MergeFrom(const CommonMsgHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 obj_id = 1;
  inline bool has_obj_id() const;
  inline void clear_obj_id();
  static const int kObjIdFieldNumber = 1;
  inline ::google::protobuf::uint32 obj_id() const;
  inline void set_obj_id(::google::protobuf::uint32 value);

  // required uint32 obj_op = 2;
  inline bool has_obj_op() const;
  inline void clear_obj_op();
  static const int kObjOpFieldNumber = 2;
  inline ::google::protobuf::uint32 obj_op() const;
  inline void set_obj_op(::google::protobuf::uint32 value);

  // required uint32 version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // required uint32 reserved = 4;
  inline bool has_reserved() const;
  inline void clear_reserved();
  static const int kReservedFieldNumber = 4;
  inline ::google::protobuf::uint32 reserved() const;
  inline void set_reserved(::google::protobuf::uint32 value);

  // required string str = 5;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 5;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // @@protoc_insertion_point(class_scope:com.mingz.frame.CommonMsgHead)
 private:
  inline void set_has_obj_id();
  inline void clear_has_obj_id();
  inline void set_has_obj_op();
  inline void clear_has_obj_op();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_reserved();
  inline void clear_has_reserved();
  inline void set_has_str();
  inline void clear_has_str();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 obj_id_;
  ::google::protobuf::uint32 obj_op_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 reserved_;
  ::std::string* str_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_myframe_2eproto();
  friend void protobuf_AssignDesc_myframe_2eproto();
  friend void protobuf_ShutdownFile_myframe_2eproto();

  void InitAsDefaultInstance();
  static CommonMsgHead* default_instance_;
};
// ===================================================================


// ===================================================================

// ObjId

// required uint32 obj_id = 1;
inline bool ObjId::has_obj_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjId::set_has_obj_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjId::clear_has_obj_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjId::clear_obj_id() {
  obj_id_ = 0u;
  clear_has_obj_id();
}
inline ::google::protobuf::uint32 ObjId::obj_id() const {
  return obj_id_;
}
inline void ObjId::set_obj_id(::google::protobuf::uint32 value) {
  set_has_obj_id();
  obj_id_ = value;
}

// required uint32 thread_index = 2;
inline bool ObjId::has_thread_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjId::set_has_thread_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjId::clear_has_thread_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjId::clear_thread_index() {
  thread_index_ = 0u;
  clear_has_thread_index();
}
inline ::google::protobuf::uint32 ObjId::thread_index() const {
  return thread_index_;
}
inline void ObjId::set_thread_index(::google::protobuf::uint32 value) {
  set_has_thread_index();
  thread_index_ = value;
}

// -------------------------------------------------------------------

// PassMsgHead

// required .com.mingz.frame.ObjId src_id = 1;
inline bool PassMsgHead::has_src_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PassMsgHead::set_has_src_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PassMsgHead::clear_has_src_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PassMsgHead::clear_src_id() {
  if (src_id_ != NULL) src_id_->::com::mingz::frame::ObjId::Clear();
  clear_has_src_id();
}
inline const ::com::mingz::frame::ObjId& PassMsgHead::src_id() const {
  return src_id_ != NULL ? *src_id_ : *default_instance_->src_id_;
}
inline ::com::mingz::frame::ObjId* PassMsgHead::mutable_src_id() {
  set_has_src_id();
  if (src_id_ == NULL) src_id_ = new ::com::mingz::frame::ObjId;
  return src_id_;
}
inline ::com::mingz::frame::ObjId* PassMsgHead::release_src_id() {
  clear_has_src_id();
  ::com::mingz::frame::ObjId* temp = src_id_;
  src_id_ = NULL;
  return temp;
}
inline void PassMsgHead::set_allocated_src_id(::com::mingz::frame::ObjId* src_id) {
  delete src_id_;
  src_id_ = src_id;
  if (src_id) {
    set_has_src_id();
  } else {
    clear_has_src_id();
  }
}

// required .com.mingz.frame.ObjId dst_id = 2;
inline bool PassMsgHead::has_dst_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PassMsgHead::set_has_dst_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PassMsgHead::clear_has_dst_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PassMsgHead::clear_dst_id() {
  if (dst_id_ != NULL) dst_id_->::com::mingz::frame::ObjId::Clear();
  clear_has_dst_id();
}
inline const ::com::mingz::frame::ObjId& PassMsgHead::dst_id() const {
  return dst_id_ != NULL ? *dst_id_ : *default_instance_->dst_id_;
}
inline ::com::mingz::frame::ObjId* PassMsgHead::mutable_dst_id() {
  set_has_dst_id();
  if (dst_id_ == NULL) dst_id_ = new ::com::mingz::frame::ObjId;
  return dst_id_;
}
inline ::com::mingz::frame::ObjId* PassMsgHead::release_dst_id() {
  clear_has_dst_id();
  ::com::mingz::frame::ObjId* temp = dst_id_;
  dst_id_ = NULL;
  return temp;
}
inline void PassMsgHead::set_allocated_dst_id(::com::mingz::frame::ObjId* dst_id) {
  delete dst_id_;
  dst_id_ = dst_id;
  if (dst_id) {
    set_has_dst_id();
  } else {
    clear_has_dst_id();
  }
}

// required .com.mingz.frame.PassMsgCmd cmd = 3;
inline bool PassMsgHead::has_cmd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PassMsgHead::set_has_cmd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PassMsgHead::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PassMsgHead::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::com::mingz::frame::PassMsgCmd PassMsgHead::cmd() const {
  return static_cast< ::com::mingz::frame::PassMsgCmd >(cmd_);
}
inline void PassMsgHead::set_cmd(::com::mingz::frame::PassMsgCmd value) {
  assert(::com::mingz::frame::PassMsgCmd_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// required string str = 4;
inline bool PassMsgHead::has_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PassMsgHead::set_has_str() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PassMsgHead::clear_has_str() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PassMsgHead::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& PassMsgHead::str() const {
  return *str_;
}
inline void PassMsgHead::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void PassMsgHead::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void PassMsgHead::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PassMsgHead::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* PassMsgHead::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PassMsgHead::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CommonMsgHead

// required uint32 obj_id = 1;
inline bool CommonMsgHead::has_obj_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonMsgHead::set_has_obj_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonMsgHead::clear_has_obj_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonMsgHead::clear_obj_id() {
  obj_id_ = 0u;
  clear_has_obj_id();
}
inline ::google::protobuf::uint32 CommonMsgHead::obj_id() const {
  return obj_id_;
}
inline void CommonMsgHead::set_obj_id(::google::protobuf::uint32 value) {
  set_has_obj_id();
  obj_id_ = value;
}

// required uint32 obj_op = 2;
inline bool CommonMsgHead::has_obj_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonMsgHead::set_has_obj_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonMsgHead::clear_has_obj_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonMsgHead::clear_obj_op() {
  obj_op_ = 0u;
  clear_has_obj_op();
}
inline ::google::protobuf::uint32 CommonMsgHead::obj_op() const {
  return obj_op_;
}
inline void CommonMsgHead::set_obj_op(::google::protobuf::uint32 value) {
  set_has_obj_op();
  obj_op_ = value;
}

// required uint32 version = 3;
inline bool CommonMsgHead::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonMsgHead::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonMsgHead::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonMsgHead::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 CommonMsgHead::version() const {
  return version_;
}
inline void CommonMsgHead::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
}

// required uint32 reserved = 4;
inline bool CommonMsgHead::has_reserved() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonMsgHead::set_has_reserved() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommonMsgHead::clear_has_reserved() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommonMsgHead::clear_reserved() {
  reserved_ = 0u;
  clear_has_reserved();
}
inline ::google::protobuf::uint32 CommonMsgHead::reserved() const {
  return reserved_;
}
inline void CommonMsgHead::set_reserved(::google::protobuf::uint32 value) {
  set_has_reserved();
  reserved_ = value;
}

// required string str = 5;
inline bool CommonMsgHead::has_str() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommonMsgHead::set_has_str() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommonMsgHead::clear_has_str() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommonMsgHead::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& CommonMsgHead::str() const {
  return *str_;
}
inline void CommonMsgHead::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void CommonMsgHead::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void CommonMsgHead::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonMsgHead::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* CommonMsgHead::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CommonMsgHead::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace frame
}  // namespace mingz
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::mingz::frame::PassMsgCmd>() {
  return ::com::mingz::frame::PassMsgCmd_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_myframe_2eproto__INCLUDED
