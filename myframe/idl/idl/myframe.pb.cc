// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: idl/myframe.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "idl/myframe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ObjId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjId_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PassMsgCmd_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_idl_2fmyframe_2eproto() {
  protobuf_AddDesc_idl_2fmyframe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "idl/myframe.proto");
  GOOGLE_CHECK(file != NULL);
  ObjId_descriptor_ = file->message_type(0);
  static const int ObjId_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjId, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjId, thread_index_),
  };
  ObjId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjId_descriptor_,
      ObjId::default_instance_,
      ObjId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjId));
  PassMsg_descriptor_ = file->message_type(1);
  static const int PassMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassMsg, src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassMsg, dst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassMsg, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassMsg, str_),
  };
  PassMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassMsg_descriptor_,
      PassMsg::default_instance_,
      PassMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassMsg));
  CommonMsg_descriptor_ = file->message_type(2);
  static const int CommonMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMsg, obj_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMsg, obj_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMsg, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMsg, reserved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMsg, str_),
  };
  CommonMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonMsg_descriptor_,
      CommonMsg::default_instance_,
      CommonMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonMsg));
  PassMsgCmd_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_idl_2fmyframe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjId_descriptor_, &ObjId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassMsg_descriptor_, &PassMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonMsg_descriptor_, &CommonMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_idl_2fmyframe_2eproto() {
  delete ObjId::default_instance_;
  delete ObjId_reflection_;
  delete PassMsg::default_instance_;
  delete PassMsg_reflection_;
  delete CommonMsg::default_instance_;
  delete CommonMsg_reflection_;
}

void protobuf_AddDesc_idl_2fmyframe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021idl/myframe.proto\"-\n\005ObjId\022\016\n\006obj_id\030\001"
    " \002(\r\022\024\n\014thread_index\030\002 \002(\r\"`\n\007PassMsg\022\026\n"
    "\006src_id\030\001 \002(\0132\006.ObjId\022\026\n\006dst_id\030\002 \002(\0132\006."
    "ObjId\022\030\n\003cmd\030\003 \002(\0162\013.PassMsgCmd\022\013\n\003str\030\004"
    " \002(\t\"[\n\tCommonMsg\022\016\n\006obj_id\030\001 \002(\r\022\016\n\006obj"
    "_op\030\002 \002(\r\022\017\n\007version\030\003 \002(\r\022\020\n\010reserved\030\004"
    " \002(\r\022\013\n\003str\030\005 \002(\t*0\n\nPassMsgCmd\022\022\n\016ADD_N"
    "EW_SOCEKT\020\000\022\016\n\nCOMMON_MSG\020\001", 307);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "idl/myframe.proto", &protobuf_RegisterTypes);
  ObjId::default_instance_ = new ObjId();
  PassMsg::default_instance_ = new PassMsg();
  CommonMsg::default_instance_ = new CommonMsg();
  ObjId::default_instance_->InitAsDefaultInstance();
  PassMsg::default_instance_->InitAsDefaultInstance();
  CommonMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_idl_2fmyframe_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_idl_2fmyframe_2eproto {
  StaticDescriptorInitializer_idl_2fmyframe_2eproto() {
    protobuf_AddDesc_idl_2fmyframe_2eproto();
  }
} static_descriptor_initializer_idl_2fmyframe_2eproto_;
const ::google::protobuf::EnumDescriptor* PassMsgCmd_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassMsgCmd_descriptor_;
}
bool PassMsgCmd_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ObjId::kObjIdFieldNumber;
const int ObjId::kThreadIndexFieldNumber;
#endif  // !_MSC_VER

ObjId::ObjId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ObjId::InitAsDefaultInstance() {
}

ObjId::ObjId(const ObjId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ObjId::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = 0u;
  thread_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjId::~ObjId() {
  SharedDtor();
}

void ObjId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjId_descriptor_;
}

const ObjId& ObjId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idl_2fmyframe_2eproto();
  return *default_instance_;
}

ObjId* ObjId::default_instance_ = NULL;

ObjId* ObjId::New() const {
  return new ObjId;
}

void ObjId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_id_ = 0u;
    thread_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 obj_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thread_index;
        break;
      }

      // required uint32 thread_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thread_index_)));
          set_has_thread_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->obj_id(), output);
  }

  // required uint32 thread_index = 2;
  if (has_thread_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thread_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 obj_id = 1;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->obj_id(), target);
  }

  // required uint32 thread_index = 2;
  if (has_thread_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->thread_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obj_id());
    }

    // required uint32 thread_index = 2;
    if (has_thread_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thread_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjId::MergeFrom(const ObjId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_thread_index()) {
      set_thread_index(from.thread_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjId::CopyFrom(const ObjId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ObjId::Swap(ObjId* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    std::swap(thread_index_, other->thread_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjId_descriptor_;
  metadata.reflection = ObjId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassMsg::kSrcIdFieldNumber;
const int PassMsg::kDstIdFieldNumber;
const int PassMsg::kCmdFieldNumber;
const int PassMsg::kStrFieldNumber;
#endif  // !_MSC_VER

PassMsg::PassMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassMsg::InitAsDefaultInstance() {
  src_id_ = const_cast< ::ObjId*>(&::ObjId::default_instance());
  dst_id_ = const_cast< ::ObjId*>(&::ObjId::default_instance());
}

PassMsg::PassMsg(const PassMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassMsg::SharedCtor() {
  _cached_size_ = 0;
  src_id_ = NULL;
  dst_id_ = NULL;
  cmd_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassMsg::~PassMsg() {
  SharedDtor();
}

void PassMsg::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
    delete src_id_;
    delete dst_id_;
  }
}

void PassMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassMsg_descriptor_;
}

const PassMsg& PassMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idl_2fmyframe_2eproto();
  return *default_instance_;
}

PassMsg* PassMsg::default_instance_ = NULL;

PassMsg* PassMsg::New() const {
  return new PassMsg;
}

void PassMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src_id()) {
      if (src_id_ != NULL) src_id_->::ObjId::Clear();
    }
    if (has_dst_id()) {
      if (dst_id_ != NULL) dst_id_->::ObjId::Clear();
    }
    cmd_ = 0;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ObjId src_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst_id;
        break;
      }

      // required .ObjId dst_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cmd;
        break;
      }

      // required .PassMsgCmd cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PassMsgCmd_IsValid(value)) {
            set_cmd(static_cast< ::PassMsgCmd >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_str;
        break;
      }

      // required string str = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .ObjId src_id = 1;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->src_id(), output);
  }

  // required .ObjId dst_id = 2;
  if (has_dst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dst_id(), output);
  }

  // required .PassMsgCmd cmd = 3;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cmd(), output);
  }

  // required string str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ObjId src_id = 1;
  if (has_src_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->src_id(), target);
  }

  // required .ObjId dst_id = 2;
  if (has_dst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dst_id(), target);
  }

  // required .PassMsgCmd cmd = 3;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cmd(), target);
  }

  // required string str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ObjId src_id = 1;
    if (has_src_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src_id());
    }

    // required .ObjId dst_id = 2;
    if (has_dst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst_id());
    }

    // required .PassMsgCmd cmd = 3;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // required string str = 4;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassMsg::MergeFrom(const PassMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_id()) {
      mutable_src_id()->::ObjId::MergeFrom(from.src_id());
    }
    if (from.has_dst_id()) {
      mutable_dst_id()->::ObjId::MergeFrom(from.dst_id());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassMsg::CopyFrom(const PassMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_src_id()) {
    if (!this->src_id().IsInitialized()) return false;
  }
  if (has_dst_id()) {
    if (!this->dst_id().IsInitialized()) return false;
  }
  return true;
}

void PassMsg::Swap(PassMsg* other) {
  if (other != this) {
    std::swap(src_id_, other->src_id_);
    std::swap(dst_id_, other->dst_id_);
    std::swap(cmd_, other->cmd_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassMsg_descriptor_;
  metadata.reflection = PassMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonMsg::kObjIdFieldNumber;
const int CommonMsg::kObjOpFieldNumber;
const int CommonMsg::kVersionFieldNumber;
const int CommonMsg::kReservedFieldNumber;
const int CommonMsg::kStrFieldNumber;
#endif  // !_MSC_VER

CommonMsg::CommonMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonMsg::InitAsDefaultInstance() {
}

CommonMsg::CommonMsg(const CommonMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonMsg::SharedCtor() {
  _cached_size_ = 0;
  obj_id_ = 0u;
  obj_op_ = 0u;
  version_ = 0u;
  reserved_ = 0u;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonMsg::~CommonMsg() {
  SharedDtor();
}

void CommonMsg::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void CommonMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonMsg_descriptor_;
}

const CommonMsg& CommonMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_idl_2fmyframe_2eproto();
  return *default_instance_;
}

CommonMsg* CommonMsg::default_instance_ = NULL;

CommonMsg* CommonMsg::New() const {
  return new CommonMsg;
}

void CommonMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obj_id_ = 0u;
    obj_op_ = 0u;
    version_ = 0u;
    reserved_ = 0u;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 obj_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_id_)));
          set_has_obj_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_obj_op;
        break;
      }

      // required uint32 obj_op = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obj_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obj_op_)));
          set_has_obj_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // required uint32 version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reserved;
        break;
      }

      // required uint32 reserved = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reserved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved_)));
          set_has_reserved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_str;
        break;
      }

      // required string str = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 obj_id = 1;
  if (has_obj_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->obj_id(), output);
  }

  // required uint32 obj_op = 2;
  if (has_obj_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->obj_op(), output);
  }

  // required uint32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  // required uint32 reserved = 4;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reserved(), output);
  }

  // required string str = 5;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->str(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 obj_id = 1;
  if (has_obj_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->obj_id(), target);
  }

  // required uint32 obj_op = 2;
  if (has_obj_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->obj_op(), target);
  }

  // required uint32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  // required uint32 reserved = 4;
  if (has_reserved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reserved(), target);
  }

  // required string str = 5;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->str(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obj_id());
    }

    // required uint32 obj_op = 2;
    if (has_obj_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obj_op());
    }

    // required uint32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // required uint32 reserved = 4;
    if (has_reserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved());
    }

    // required string str = 5;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonMsg::MergeFrom(const CommonMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obj_id()) {
      set_obj_id(from.obj_id());
    }
    if (from.has_obj_op()) {
      set_obj_op(from.obj_op());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_reserved()) {
      set_reserved(from.reserved());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonMsg::CopyFrom(const CommonMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CommonMsg::Swap(CommonMsg* other) {
  if (other != this) {
    std::swap(obj_id_, other->obj_id_);
    std::swap(obj_op_, other->obj_op_);
    std::swap(version_, other->version_);
    std::swap(reserved_, other->reserved_);
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonMsg_descriptor_;
  metadata.reflection = CommonMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
