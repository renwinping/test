usage:

./build.sh all

test:
	./test/test_server
	./test_client 127.0.0.1 8888
	./test_client 127.0.0.1 8888
	./test_client 127.0.0.1 8888


1、支持多线程， server 通过 add_worker_thread 添加工作线程
2、每一个base_net_thread.h 聚合一个epoll 容器
3、每一个连接添加到epoll 容器中， 将连接指针add 到epoll 中， epoll 返回时直接调用指针对象对应的
处理方法
4、线程间的连接支持通信，线程间也支持消息传递
传递的模式 采用类似 memcache 的处理方式， 放到目的线程队列， 同时在目的线程管道写一个消息
目的线程管道句柄 epoll 相应时， 调用管道句柄处理方法， 从线程队列中取消息处理
5、写日志的方式改成日志线程轮训hash表写到文件， 每一个调用写日志的地方， 其实放在hash表的一个桶里
每一个桶一个锁， 锁耗时就减少很大部分了

/************  **********/
有个小缺点， 每一个放到线程队列里的消息都new, 不是太好， 后期再改吧

/**********   ***************/
业务需求， 写个简化版， 通过libevent 触发异步
线程间传递的消息简化 就是一个fd
放到newframe 中

后边再改吧








