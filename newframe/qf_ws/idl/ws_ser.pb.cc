// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ws_ser.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ws_ser.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* WsConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WsConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ws_5fser_2eproto() {
  protobuf_AddDesc_ws_5fser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ws_ser.proto");
  GOOGLE_CHECK(file != NULL);
  WsConf_descriptor_ = file->message_type(0);
  static const int WsConf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsConf, webs_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsConf, webs_thread_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsConf, http_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsConf, http_thread_num_),
  };
  WsConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WsConf_descriptor_,
      WsConf::default_instance_,
      WsConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WsConf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ws_5fser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WsConf_descriptor_, &WsConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ws_5fser_2eproto() {
  delete WsConf::default_instance_;
  delete WsConf_reflection_;
}

void protobuf_AddDesc_ws_5fser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014ws_ser.proto\"`\n\006WsConf\022\021\n\twebs_port\030\001 "
    "\002(\r\022\027\n\017webs_thread_num\030\002 \002(\r\022\021\n\thttp_por"
    "t\030\003 \002(\r\022\027\n\017http_thread_num\030\004 \002(\r", 112);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ws_ser.proto", &protobuf_RegisterTypes);
  WsConf::default_instance_ = new WsConf();
  WsConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ws_5fser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ws_5fser_2eproto {
  StaticDescriptorInitializer_ws_5fser_2eproto() {
    protobuf_AddDesc_ws_5fser_2eproto();
  }
} static_descriptor_initializer_ws_5fser_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WsConf::kWebsPortFieldNumber;
const int WsConf::kWebsThreadNumFieldNumber;
const int WsConf::kHttpPortFieldNumber;
const int WsConf::kHttpThreadNumFieldNumber;
#endif  // !_MSC_VER

WsConf::WsConf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WsConf::InitAsDefaultInstance() {
}

WsConf::WsConf(const WsConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WsConf::SharedCtor() {
  _cached_size_ = 0;
  webs_port_ = 0u;
  webs_thread_num_ = 0u;
  http_port_ = 0u;
  http_thread_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WsConf::~WsConf() {
  SharedDtor();
}

void WsConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WsConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WsConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WsConf_descriptor_;
}

const WsConf& WsConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ws_5fser_2eproto();
  return *default_instance_;
}

WsConf* WsConf::default_instance_ = NULL;

WsConf* WsConf::New() const {
  return new WsConf;
}

void WsConf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    webs_port_ = 0u;
    webs_thread_num_ = 0u;
    http_port_ = 0u;
    http_thread_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WsConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 webs_port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webs_port_)));
          set_has_webs_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_webs_thread_num;
        break;
      }

      // required uint32 webs_thread_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webs_thread_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webs_thread_num_)));
          set_has_webs_thread_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_http_port;
        break;
      }

      // required uint32 http_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_http_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &http_port_)));
          set_has_http_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_http_thread_num;
        break;
      }

      // required uint32 http_thread_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_http_thread_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &http_thread_num_)));
          set_has_http_thread_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WsConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 webs_port = 1;
  if (has_webs_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->webs_port(), output);
  }

  // required uint32 webs_thread_num = 2;
  if (has_webs_thread_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webs_thread_num(), output);
  }

  // required uint32 http_port = 3;
  if (has_http_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->http_port(), output);
  }

  // required uint32 http_thread_num = 4;
  if (has_http_thread_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->http_thread_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WsConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 webs_port = 1;
  if (has_webs_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->webs_port(), target);
  }

  // required uint32 webs_thread_num = 2;
  if (has_webs_thread_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webs_thread_num(), target);
  }

  // required uint32 http_port = 3;
  if (has_http_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->http_port(), target);
  }

  // required uint32 http_thread_num = 4;
  if (has_http_thread_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->http_thread_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WsConf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 webs_port = 1;
    if (has_webs_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webs_port());
    }

    // required uint32 webs_thread_num = 2;
    if (has_webs_thread_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webs_thread_num());
    }

    // required uint32 http_port = 3;
    if (has_http_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->http_port());
    }

    // required uint32 http_thread_num = 4;
    if (has_http_thread_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->http_thread_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WsConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WsConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WsConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WsConf::MergeFrom(const WsConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_webs_port()) {
      set_webs_port(from.webs_port());
    }
    if (from.has_webs_thread_num()) {
      set_webs_thread_num(from.webs_thread_num());
    }
    if (from.has_http_port()) {
      set_http_port(from.http_port());
    }
    if (from.has_http_thread_num()) {
      set_http_thread_num(from.http_thread_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WsConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WsConf::CopyFrom(const WsConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WsConf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void WsConf::Swap(WsConf* other) {
  if (other != this) {
    std::swap(webs_port_, other->webs_port_);
    std::swap(webs_thread_num_, other->webs_thread_num_);
    std::swap(http_port_, other->http_port_);
    std::swap(http_thread_num_, other->http_thread_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WsConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WsConf_descriptor_;
  metadata.reflection = WsConf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
